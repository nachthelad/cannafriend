"use client";

import { useState, useRef, useCallback } from "react";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";
import useEmblaCarousel from "embla-carousel-react";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import {
  ImageUpload,
  type ImageUploadHandle,
} from "@/components/common/image-upload";
import { ImageGalleryModal } from "@/components/plant/photos/image-gallery-modal";
import { Plus, Star, Trash2 } from "lucide-react";
import { useTranslation } from "react-i18next";
import Image from "next/image";
import type { Plant } from "@/types";

interface PlantPhotoGalleryProps {
  plant: Plant;
  onPhotosChange: (newPhotos: string[]) => Promise<void>;
  onRemovePhoto: (index: number) => Promise<void>;
  onSetCoverPhoto: (photoUrl: string) => Promise<void>;
}

export function PlantPhotoGallery({
  plant,
  onPhotosChange,
  onRemovePhoto,
  onSetCoverPhoto,
}: PlantPhotoGalleryProps) {
  const { t } = useTranslation(["plants", "common"]);
  const imageUploadRef = useRef<ImageUploadHandle>(null);
  const [selectedPhoto, setSelectedPhoto] = useState<string>(
    () => plant.coverPhoto ?? plant.photos?.[0] ?? ""
  );
  const [isLightboxOpen, setIsLightboxOpen] = useState(false);
  const [lightboxIndex, setLightboxIndex] = useState(0);

  // Embla Carousel for thumbnails
  const [emblaRef, emblaApi] = useEmblaCarousel({
    align: "start",
    dragFree: true,
    containScroll: "trimSnaps",
  });

  const photos = plant.photos ?? [];
  const coverPhoto = plant.coverPhoto ?? "";

  // Get all available images (cover + photos, deduplicated)
  const allImages = [
    ...(coverPhoto ? [coverPhoto] : []),
    ...photos,
  ].filter((img, i, arr) => arr.indexOf(img) === i);

  const openLightbox = (photoUrl: string) => {
    const index = allImages.findIndex(img => img === photoUrl);
    setLightboxIndex(index >= 0 ? index : 0);
    setIsLightboxOpen(true);
  };

  return (
    <div className="space-y-6">
      {/* Desktop Gallery */}
      <div className="hidden md:block">
        <div className="border rounded-lg shadow-sm bg-background overflow-hidden">
          {/* Main Image Display */}
          <div
            className="relative min-h-[300px] max-h-[500px] bg-muted flex items-center justify-center cursor-pointer group"
            onClick={() => {
              const currentPhoto = selectedPhoto || coverPhoto || photos[0];
              if (currentPhoto) openLightbox(currentPhoto);
            }}
          >
            {selectedPhoto || coverPhoto || photos[0] ? (
              <>
                <Image
                  src={selectedPhoto || coverPhoto || photos[0] || "/placeholder.svg"}
                  alt={plant.name}
                  fill
                  className="object-contain transition-transform group-hover:scale-105"
                  sizes="(max-width: 1024px) 100vw, 50vw"
                  priority
                />
                <div className="absolute inset-0 bg-black/0 group-hover:bg-black/10 transition-colors flex items-center justify-center">
                  <div className="opacity-0 group-hover:opacity-100 transition-opacity bg-black/50 text-white px-3 py-1 rounded-full text-sm">
                    Click to enlarge
                  </div>
                </div>
              </>
            ) : (
              <div className="flex items-center justify-center h-full">
                <div className="text-center">
                  <div className="text-muted-foreground mb-4">
                    {t("photos.noPhotos", { ns: "plants" })}
                  </div>
                  <Button onClick={() => imageUploadRef.current?.open()}>
                    <Plus className="mr-2 h-4 w-4" />
                    {t("photos.addFirstPhoto", { ns: "plants" })}
                  </Button>
                </div>
              </div>
            )}
          </div>

          {/* Photo Count and Add Button */}
          <div className="flex items-center justify-between px-4 py-3 border-b">
            <div className="text-sm text-muted-foreground">
              {allImages.length}{" "}
              {allImages.length === 1
                ? t("photos.photo", { ns: "plants" })
                : t("photos.photos", { ns: "plants" })}
            </div>
            <Button
              size="sm"
              variant="outline"
              onClick={() => imageUploadRef.current?.open()}
            >
              <Plus className="mr-2 h-4 w-4" />
              {t("photos.addPhotos", { ns: "plants" })}
            </Button>
          </div>

          {/* Thumbnail Carousel */}
          {allImages.length > 0 && (
            <div className="p-4">
              <div className="overflow-hidden" ref={emblaRef}>
                <div className="flex gap-3">
                  {allImages.map((photo, idx) => (
                  <div
                    key={idx}
                    role="button"
                    tabIndex={0}
                    onClick={(e) => {
                      if (e.detail === 1) {
                        // Single click - select photo
                        setSelectedPhoto(photo);
                      } else if (e.detail === 2) {
                        // Double click - open lightbox
                        openLightbox(photo);
                      }
                    }}
                    onKeyDown={(e) => {
                      if (e.key === "Enter" || e.key === " ") {
                        e.preventDefault();
                        setSelectedPhoto(photo);
                      }
                    }}
                    className={`relative flex-shrink-0 w-20 h-20 overflow-hidden rounded-lg border-2 cursor-pointer transition-all hover:scale-105 ${
                      selectedPhoto === photo
                        ? "ring-2 ring-primary border-primary"
                        : "border-muted hover:border-muted-foreground"
                    }`}
                  >
                    <Image
                      src={photo}
                      alt={`${plant.name} ${idx + 1}`}
                      fill
                      className="object-cover"
                      sizes="80px"
                      loading="lazy"
                    />

                    {/* Cover Photo Indicator */}
                    {photo === coverPhoto && (
                      <div className="absolute top-1 left-1">
                        <div className="bg-yellow-500 text-white rounded-full p-1">
                          <Star className="h-3 w-3 fill-current" />
                        </div>
                      </div>
                    )}

                    {/* Action Buttons */}
                    <div className="absolute inset-0 bg-black/0 hover:bg-black/20 transition-colors">
                      <div className="absolute top-1 right-1 flex gap-1">
                        {/* Set as Cover Button */}
                        {photo !== coverPhoto && (
                          <AlertDialog>
                            <AlertDialogTrigger asChild>
                              <Button
                                variant="secondary"
                                size="icon"
                                className="h-6 w-6 p-0 bg-white/90 hover:bg-white"
                                onClick={(e) => e.stopPropagation()}
                                aria-label={t("photos.setAsCover", { ns: "plants" })}
                              >
                                <Star className="h-3 w-3 text-yellow-600" />
                              </Button>
                            </AlertDialogTrigger>
                            <AlertDialogContent>
                              <AlertDialogHeader>
                                <AlertDialogTitle>
                                  {t("photos.setCoverConfirmTitle", { ns: "plants" })}
                                </AlertDialogTitle>
                                <AlertDialogDescription>
                                  {t("photos.setCoverConfirmDesc", { ns: "plants" })}
                                </AlertDialogDescription>
                              </AlertDialogHeader>
                              <AlertDialogFooter>
                                <AlertDialogCancel>
                                  {t("cancel", { ns: "common" })}
                                </AlertDialogCancel>
                                <AlertDialogAction
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    void onSetCoverPhoto(photo);
                                  }}
                                >
                                  {t("photos.setAsCover", { ns: "plants" })}
                                </AlertDialogAction>
                              </AlertDialogFooter>
                            </AlertDialogContent>
                          </AlertDialog>
                        )}

                        {/* Delete Photo Button */}
                        <AlertDialog>
                          <AlertDialogTrigger asChild>
                            <Button
                              variant="secondary"
                              size="icon"
                              className="h-6 w-6 p-0 bg-white/90 hover:bg-white"
                              onClick={(e) => e.stopPropagation()}
                              aria-label={t("photos.removePhoto", { ns: "plants" })}
                            >
                              <Trash2 className="h-3 w-3 text-destructive" />
                            </Button>
                          </AlertDialogTrigger>
                          <AlertDialogContent>
                            <AlertDialogHeader>
                              <AlertDialogTitle>
                                {t("photos.removeConfirmTitle", { ns: "plants" })}
                              </AlertDialogTitle>
                              <AlertDialogDescription>
                                {t("photos.removeConfirmDesc", { ns: "plants" })}
                              </AlertDialogDescription>
                            </AlertDialogHeader>
                            <AlertDialogFooter>
                              <AlertDialogCancel>
                                {t("cancel", { ns: "common" })}
                              </AlertDialogCancel>
                              <AlertDialogAction
                                onClick={(e) => {
                                  e.stopPropagation();
                                  void onRemovePhoto(idx);
                                }}
                                className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
                              >
                                {t("deleteConfirm", { ns: "plants" })}
                              </AlertDialogAction>
                            </AlertDialogFooter>
                          </AlertDialogContent>
                        </AlertDialog>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Mobile Gallery */}
      <div className="md:hidden">
        <div className="border rounded-lg shadow-sm bg-background overflow-hidden">
          {/* Main Image Display */}
          <div
            className="relative min-h-[250px] max-h-[400px] bg-muted flex items-center justify-center cursor-pointer active:scale-95 transition-transform"
            onClick={() => {
              const currentPhoto = selectedPhoto || coverPhoto || photos[0];
              if (currentPhoto) openLightbox(currentPhoto);
            }}
          >
            {selectedPhoto || coverPhoto || photos[0] ? (
              <Image
                src={selectedPhoto || coverPhoto || photos[0] || "/placeholder.svg"}
                alt={plant.name}
                fill
                className="object-contain"
                sizes="100vw"
                priority
              />
            ) : (
              <div className="flex items-center justify-center h-full">
                <div className="text-center p-4">
                  <div className="text-muted-foreground mb-4">
                    {t("photos.noPhotos", { ns: "plants" })}
                  </div>
                  <Button onClick={() => imageUploadRef.current?.open()}>
                    <Plus className="mr-2 h-4 w-4" />
                    {t("photos.addFirstPhoto", { ns: "plants" })}
                  </Button>
                </div>
              </div>
            )}
          </div>

          {/* Mobile Thumbnails - Enhanced Horizontal Scroll */}
          {allImages.length > 1 && (
            <div className="p-4">
              <div className="flex gap-3 overflow-x-auto pb-2 scroll-smooth snap-x snap-mandatory">
                {allImages.map((photo, idx) => (
                  <div
                    key={idx}
                    role="button"
                    tabIndex={0}
                    onClick={() => {
                      setSelectedPhoto(photo);
                      openLightbox(photo);
                    }}
                    className={`relative flex-shrink-0 w-20 h-20 overflow-hidden rounded-lg border-2 cursor-pointer transition-all duration-200 active:scale-90 snap-center ${
                      selectedPhoto === photo
                        ? "ring-2 ring-primary border-primary shadow-lg scale-105"
                        : "border-muted hover:border-muted-foreground"
                    }`}
                  >
                    <Image
                      src={photo}
                      alt={`${plant.name} ${idx + 1}`}
                      fill
                      className="object-cover"
                      sizes="80px"
                      loading="lazy"
                    />
                    {photo === coverPhoto && (
                      <div className="absolute top-0.5 left-0.5">
                        <Star className="h-3 w-3 text-yellow-500 fill-current" />
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Mobile Add Button */}
          <div className="p-4 border-t">
            <Button
              className="w-full h-12 text-base"
              variant="outline"
              onClick={() => imageUploadRef.current?.open()}
            >
              <Plus className="mr-2 h-5 w-5" />
              {t("photos.addPhotos", { ns: "plants" })}
            </Button>
          </div>
        </div>
      </div>

      {/* Hidden Image Upload */}
      <ImageUpload
        ref={imageUploadRef}
        onImagesChange={onPhotosChange}
        hideDefaultTrigger
        maxImages={10}
        className="sr-only"
      />

      {/* Lightbox Modal */}
      <ImageGalleryModal
        images={allImages}
        isOpen={isLightboxOpen}
        onClose={() => setIsLightboxOpen(false)}
        initialIndex={lightboxIndex}
      />
    </div>
  );
}